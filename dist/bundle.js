(()=>{"use strict";var t,e=function(){function t(t,e,n,r){this.templateElement=document.getElementById(t),this.hostElement=document.getElementById(e),this.element=this.importTemplateContent().firstElementChild,this.attachTemplateElement(n)}return t.prototype.importTemplateContent=function(){return document.importNode(this.templateElement,!0).content},t.prototype.attachTemplateElement=function(t){this.hostElement.insertAdjacentElement(t?"afterbegin":"beforeend",this.element)},t}();function n(t,e,n){var r=n.value;return{configurable:!0,get:function(){return r.bind(this)}}}!function(t){t[t.ACTIVE=0]="ACTIVE",t[t.FINISHED=1]="FINISHED"}(t||(t={}));var r,o=function(t,e,n,r){this.title=t,this.description=e,this.people=n,this.status=r,this.id=(Math.random()+Date.now()).toString()},i=(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),a=function(e){function n(){var t=e.call(this)||this;return t.projects=[],t}return i(n,e),n.getInstance=function(){return this.instance||(this.instance=new n),this.instance},n.prototype.addProject=function(e,n,r){var i=new o(e,n,r,t.ACTIVE);this.projects.push(i),this.updateListeners()},n.prototype.updateListeners=function(){for(var t=0,e=this.listeners;t<e.length;t++)(0,e[t])(this.projects.slice())},n.prototype.moveProject=function(t,e){var n=this.projects.filter((function(e){return e.id===t}))[0];n&&n.status!==e&&(n.status=e,this.updateListeners())},n}(function(){function t(){this.listeners=[]}return t.prototype.addListener=function(t){this.listeners.push(t)},t}()).getInstance(),c=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),s=function(t){function e(){var e=t.call(this,"project-input","app",!0)||this;return e.titleInput=e.element.querySelector("#title"),e.descriptionInput=e.element.querySelector("#description"),e.peopleInput=e.element.querySelector("#people"),e.configure(),e}return c(e,t),e.prototype.configure=function(){this.element.addEventListener("submit",this.sumbitHandler)},e.prototype.sumbitHandler=function(t){t.preventDefault();var e=this.validateFormData();if(Array.isArray(e)){var n=e[0],r=e[1],o=e[2];a.addProject(n,r,o),this.clearAll()}},e.prototype.renderContent=function(){},e.prototype.validateFormData=function(){var t=this.titleInput.value.trim(),e=this.descriptionInput.value.trim(),n=+this.peopleInput.value,r={required:!0,value:t,minLength:3,maxLength:50},o={required:!0,value:e,minLength:10,maxLength:100},i={required:!0,value:n,max:6};if(this.isFormValid([r,o,i]))return[t,e,+n];alert("Form not valid")},e.prototype.isFormValid=function(t){return t.every((function(t){return function(t){var e=!0;return t.required&&(e=e&&0!==t.value.toString().length),"maxLength"in t&&void 0!==t.maxLength&&(e=e&&t.value.toString().length<t.maxLength),"minLength"in t&&void 0!==t.minLength&&(e=e&&t.value.toString().length>t.minLength),"max"in t&&void 0!==t.max&&(e=e&&t.value<t.max),"min"in t&&void 0!==t.min&&(e=e&&t.value>t.min),e}(t)}))},e.prototype.clearAll=function(){this.titleInput.value="",this.descriptionInput.value="",this.peopleInput.value=""},function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);i>3&&a&&Object.defineProperty(e,n,a)}([n],e.prototype,"sumbitHandler",null),e}(e),l=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),p=function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a},u=function(t){function e(e,n){var r=t.call(this,"single-project",e,!1,n.id)||this;return r.project=n,r.configure(),r.renderContent(),r}return l(e,t),Object.defineProperty(e.prototype,"persons",{get:function(){return 1===this.project.people?"1 person":"".concat(this.project.people," persons")},enumerable:!1,configurable:!0}),e.prototype.dragStartHandler=function(t){t.dataTransfer.setData("text/plain",this.project.id),t.dataTransfer.effectAllowed="move"},e.prototype.dragEndHandler=function(t){},e.prototype.renderContent=function(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assgined",this.element.querySelector("p").textContent=this.project.description},e.prototype.configure=function(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)},p([n],e.prototype,"dragStartHandler",null),p([n],e.prototype,"dragEndHandler",null),e}(e),f=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),d=function(t,e,n,r){var o,i=arguments.length,a=i<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,n,r);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(a=(i<3?o(a):i>3?o(e,n,a):o(e,n))||a);return i>3&&a&&Object.defineProperty(e,n,a),a},h=function(e){function r(t){var n=e.call(this,"project-list","app",!1,"".concat(t,"-projects"))||this;return n.type=t,n.assignedProjects=[],n.element.id="".concat(n.type,"-projects"),n.configure(),n.renderContent(),n}return f(r,e),r.prototype.dragOverHandler=function(t){t.dataTransfer&&"text/plain"===t.dataTransfer.types[0]&&(console.log(t.dataTransfer.getData("text/plain")),t.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))},r.prototype.dropHandler=function(e){var n=e.dataTransfer.getData("text/plain");a.moveProject(n,"active"===this.type?t.ACTIVE:t.FINISHED)},r.prototype.dragLeaveHandler=function(t){this.element.querySelector("ul").classList.remove("droppable")},r.prototype.renderProjects=function(){var t=this.element.querySelector("#".concat(this.type,"-projects-list"));t.innerHTML="";for(var e=0,n=this.assignedProjects;e<n.length;e++){var r=n[e];new u(t.id,r)}},r.prototype.renderContent=function(){this.element.querySelector("h2").textContent=this.type.toUpperCase()+" Projects"},r.prototype.configure=function(){var e=this;this.element.querySelector("ul").id="".concat(this.type,"-projects-list"),this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("drop",this.dropHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),a.addListener((function(n){var r=n.filter((function(n){return"active"===e.type?n.status===t.ACTIVE:n.status===t.FINISHED}));e.assignedProjects=r,e.renderProjects()}))},d([n],r.prototype,"dragOverHandler",null),d([n],r.prototype,"dropHandler",null),d([n],r.prototype,"dragLeaveHandler",null),r}(e);new s,new h("active"),new h("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,